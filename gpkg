#!/bin/bash

#
# gpkg -- UI program for Xiange Linux package management system 
# 
# by Zhang Lihui <swordhuihui@gmail.com>, 2010-04-13, 15:58
#

#path define
XGPATH=/var/xiange
XGPATH_TOOLS=$XGPATH/tools
XGPATH_LIB=$XGPATH/xglibs
XGPATH_SOURCE=$XGPATH/sources
XGPATH_UNPACK=/tmp/xiange/sources
XGPATH_DEST=/tmp/xiange/pack
XGPATH_SCRIPT=$XGPATH_LIB

#
# version and  usage 
#
gpkg_version=0.10.0
gpkg_usage="
gpkg $gpkg_version, usage:\n
	\t-v            \t\tshow current version\n
	\t--sync [path] \tsync xglibs via git to [path]/var/xiange\n
	\t-s package 	\tsearch package\n
	\t-d package 	\tdownload package\n
	\t-i package 	\tinstall package\n
	\t-D package 	\tremove package\n
	\t-I  		\t\tlist installed package\n
	\t-l package 	\tlist all files in installed package\n
	\n
XianGe base is at $XGPATH\n
"

gpkg_show_usage()
{
	echo -e $gpkg_usage
}

#
# string functions
#

#check: if $2 in $1, return 1, else return 0
str_isIn()
{
	if [ "${1/$2/}" != "${1}" ]; then
		return 1
	else
		return 0
	fi
}

#
# Error check
#

#check return code. show $1 if error.
err_check()
{
	if [ $? != 0 ]; then
		echo $1
		exit 1
	fi
}


#
# version control
#

#parse atom to $N, $V, $R, 
#by tomgrean @ LinuxSir, 2009-09-11, 20:02
atom_parse()
{
	local ATOM
	local RR

	ATOM="${1%.xgb}"
	RR="${ATOM%-r[0-9]*}"
	R="${ATOM#$RR}"
	V="${RR##*-}"
	N="${RR%$V}"
	N="${N%-}"
}

#compare 2 versions, such 2.6.9 and 2.6.10
#return 0 if same. 
#return 1 if $1 is grater than $2 
#return 2 if $1 is lesser then $2
#by lastart @ LinuxSir
atom_vercmp()
{
	v1=$1.
	v2=$2.
	while true
	do
		a=${v1%%.*}
		b=${v2%%.*}
		[ -z "$a" ] && [ -z "$b" ] &&  return 0
		[ "$a"0 -gt "$b"0 ] && return 1
		[ "$a"0 -lt "$b"0 ] && return 2
		v1="${v1#*.}"
		v2="${v2#*.}"
	done
}

#compare 2 atoms, such as linux-2.6.9.xgb and linux-2.6.10.xgb
#return 0 if same. 
#return 1 if $1 is grater than $2 
#return 2 if $1 is lesser then $2
atom_cmp()
{
	local R1
	local V1
	local N1

	#echo "Begin Compare: $1 $2"

	atom_parse $1
	R1=$R
	V1=$V
	N1=$N
	#echo "N1=$N1, V1=$V1, R1=$R1"

	atom_parse $2
	#echo "N2=$N, V2=$V, R2=$R"

	#compare version
	atom_vercmp $V1 $V
}


#
# search packages
#

#list all pack types
gpkg_get_types()
{
	gpkg_types=`ls $XGPATH_LIB 2>/dev/null`
}

gpkg_get_packages()
{
	gpkg_packs=`ls $XGPATH_LIB/$1 2>/dev/null`
}

#Get Newest file in $XGPATH_LIB/$1
gpkg_getnewest()
{
	local files
	local file
	newest=""

	files=`ls $XGPATH_LIB/$1 2>/dev/null`
	for file in $files
	do
		if [ -z $newest ]; then
			newest=$file
			#echo "First is $file"
		else
			#compare 
			#echo "compare $file $newest"
			atom_cmp $file $newest
			[ "$?" == "1" ] && newest=$file
			#echo "after compare: new=$newest"

		fi
	done
}


#find one packge $1 is type, $2 is package name, $3 is index
gpkg_searchOK()
{
	#show it.
	echo "* $1/$2"

	#get newest version
	gpkg_getnewest $1/$2
	atom_parse $newest
	echo -e "\tAvailable:\t $V$R"

	#search installed
	echo -e "\tInstalled:\t None"

	#add blank line
	echo ""
}

gpkg_search()
{
	local gpkg_types
	local type
	local gpkg_packs
	local pack
	local count=0

	gpkg_get_types
	for type in $gpkg_types
	do
		gpkg_get_packages $type
		for pack in $gpkg_packs
		do
			str_isIn $pack $1
			if [ $? == 1 ]; then
				#find one.
				count=$(($count + 1))
				gpkg_searchOK $type $pack $count
			fi
		done
	done
	echo "search $1, result count $count"
}


#
# download packet
#

#check and download package, $1 is URL, $2 is local file name.
check_and_download_raw()
{
	local fname=$2
	local retry

	#retry 3 times
	for((retry=0; retry<3; retry++))
	do
		#check if package has already exist.
		if [ -f ${XGPATH_SOURCE}/${fname} ]; then
			printf "%s exists, Skip.\n" $fname
			return 0
		else
			printf "downloading from %s, retry %d...\n" ${1} ${retry}

			[ -f ${XGPATH_SOURCE}/${fname}.tmp ] && \
				rm -f ${XGPATH_SOURCE}/${fname}.tmp 

			wget $1 -O ${XGPATH_SOURCE}/${fname}.tmp
			if [ "$?" == 0 ]; then
				#download ok.
				mv ${XGPATH_SOURCE}/${fname}.tmp ${XGPATH_SOURCE}/${fname}
				return 0
			fi
			sleep 2
		fi
	done

	printf "down load failed, quit.\n"
	return 1
}

#check and download package, $1 is URL.
check_and_download()
{
	local fname=${1##*/}

	#call raw mode.
	check_and_download_raw $1 $fname
}




#get xgb file based on package name in $1
#set $XGPATH_SCRIPT and return value in $newest

#call when decided package xgb directory
gpkg_getxgbdirOK()
{
	#set script path
	XGPATH_SCRIPT=$XGPATH_LIB/$1/$2

	#set type
	T="$1"

	#get the newest one
	gpkg_getnewest $1/$2
}

gpkg_getxgbfile()
{
	local gpkg_types
	local type
	local gpkg_packs
	local pack
	local count=0
	local -a retType
	local -a retPack

	gpkg_get_types
	for type in $gpkg_types
	do
		gpkg_get_packages $type
		for pack in $gpkg_packs
		do
			if [ $1 == $pack ]; then
				#find 
				retType[$count]=$type
				retPack[$count]=$pack
				count=$(($count + 1))
			fi
		done
	done
	
	#check result.
	if [ "$count" == "0" ]; then
		#not found
		echo "Not Found"
		return 1
	fi

	if [ "$count" == "1" ]; then
		#OK, decide directory
		gpkg_getxgbdirOK ${retType[0]} ${retPack[0]}
		#echo $newest
		return 
	fi

	#find more, show and select.
	echo "More result, $count, please select 1"

	unset retType
	unset retPack
}

#begin download, $1 is atom, such as autoconf-2.63-r1.xgb
gpkg_begin_download()
{
	local url

	#echo "begin download from $XGPATH_SCRIPT/$1"

	#find newest version.
	atom_parse $1
	echo "Begin download $N-$V$R..."

	#clear all routines by include template file
	. $XGPATH_LIB/template.xgb
	err_check "[Error] $XGPATH_LIB/template.xgb not found."

	#include package build scripts
	. $XGPATH_SCRIPT/$1
	err_check "[Error] $XGPATH_SCRIPT/$1 not found."

	#init build script file
	xgb_init

	#create source directory.
	mkdir -p $XGPATH_SOURCE
	err_check "[Error] Create dir $XGPATH_SOURCE failed."

	#download all files
	for url in ${SRC_URI}
	do
		#echo $url
		check_and_download $url
		err_check "[Error] download $url failed."
	done

	#check
	echo "Download OK"
	return 0
}

gpkg_download()
{
	local newest

	#get xgb file
	gpkg_getxgbfile $1

	if [ $? == 0 ]; then
		#found, download it
		gpkg_begin_download $newest

	else
		#not found
		return 1
	fi
}


#
# Install package
#

gpkg_rm_dir_safe()
{
	local files

	files=$(ls "$1" 2>/dev/null)
	if [ -z "$files" ]; then
		printf "Remove dir %s\n"  "$1"
		rm -rf "$1"
	fi
}

gpkg_mkpackage()
{
	local destpath="$XGPATH_DEST/var/xiange/db/$T/$N"

	mkdir -p $destpath
	err_check "[Error] create db directory failed."

	#generate file list
	cd $XGPATH_DEST
	find | xgfileinfo > /tmp/file-$N-$V$R
	mv /tmp/file-$N-$V$R $destpath/$N-$V$R.file
	err_check "[Error] move file list failed."

	#copy scripts file
	cp $XGPATH_SCRIPT/$N-$V$R.xgb $destpath/
	err_check "[Error] move file list failed."

	#add configuration file
	echo $XGB_CONFIG > $destpath/$N-$V$R.config

	#date time
	date +%F,%T > $destpath/$N-$V$R.date

	#tar it.
	tar cjpf ../$N-$V$R.tar.bz2 *
}

gpkg_rm_packgeinfo()
{
	local destpath=$XGPATH_SCRIPT

	#remove config file
	echo "remove file $destpath/$N-$V$R.config"
	rm -f $destpath/$N-$V$R.config

	#remove scripts file
	echo "remove file $destpath/$N-$V$R.xgb"
	rm -f $destpath/$N-$V$R.xgb

	#remove list file
	echo "remove file $destpath/$N-$V$R.file"
	rm -f $destpath/$N-$V$R.file

	#remove date file
	echo "remove file $destpath/$N-$V$R.file"
	rm -f $destpath/$N-$V$R.date

	#remove directory
	gpkg_rm_dir_safe $destpath
	gpkg_rm_dir_safe /var/xiange/db/$T
	gpkg_rm_dir_safe /var/xiange/db
}

gpkg_begininstall()
{
	local ret=0

	#call unpack

	# DO RM WITH CAUTION!! 
	rm -rf /tmp/xiange/sources

	mkdir -p $XGPATH_UNPACK
	cd $XGPATH_UNPACK
	xgb_unpack
	err_check "[Error] call xgb_unpack failed"

	#call config
	xgb_config
	err_check "[Error] call xgb_config failed"

	#call build
	xgb_build
	err_check "[Error] call xgb_build failed"

	#call install
	XGPATH_DEST=/tmp/xiange/pack/$N-$V$R
	rm -rf $XGPATH_DEST
	mkdir -p $XGPATH_DEST
	xgb_install
	err_check "[Error] call xgb_install failed"
	
	#make package
	gpkg_mkpackage
	err_check "[Error] make binary package failed"

	#copy to root
	echo "Install files to / ..."
	tar xf ../$N-$V$R.tar.bz2 -C /
	err_check "[Error] copy binary package to / failed"
	echo "Install OK"
	
	#post install
	xgb_postinst
	err_check "[Error] call xgb_postinst failed"

	#save binary package

	#clean up
	rm -rf /tmp/xiange
	return 0
}

gpkg_install()
{
	local newest
	local ret

	#get xgb file
	gpkg_getxgbfile $1

	if [ $? == 0 ]; then
		#found, download it
		gpkg_begin_download $newest
		ret=$?
		if [ $? == 0 ]; then
			#download ok, install it.
			gpkg_begininstall $newest
		else
			return $ret
		fi

	else
		#not found
		return 1
	fi
}

#
# CSV file operation
#

#split csv line. 
#input: $1="good,i love u,123"
#output: count=3, value[0]=good, value[1]="i love u", value[2]=123
csv_split()
{
	count=0
	local retv=$1
	unset value

	while [ -n "$retv" ]
	do
		value[$count]=${retv%%,*}
		#echo "value_$count=${value[$count]}"

		retv=${retv#${value[$count]}}
		retv=${retv#,}
		#echo "retv=$retv"

		count=$(($count+1))
	done
}


#
# remove package
#

#operations when read a file.
# l = list files
# f = remove files/symbol links
# d = remove directorys
XG_CSV_OP="l"

gpkg_csvop_ls()
{
	case "${value[0]}" in
	D)
		#directory
		printf "%s| %8s| %s\n" "d" "${value[2]}" "${value[1]}"
		;;
	S)
		#Link
		printf "%s| %8s| %s\n" "l" "${value[2]}" "${value[1]}"
		;;
	F)
		#File
		printf "%s| %8s| %s\n" " " "${value[2]}" "${value[1]}"
		;;

	*)
		#totle
		printf "\nFile: %s, Dir: %s, Link %d, Size: %dK\n" \
			"${value[1]}"\
			"${value[2]}" "${value[3]}" "${value[5]}"
		;;
	esac
	
}

gpkg_csvop_rm_file()
{
	case "${value[0]}" in
	S)
		#symbol.
		rm -f "${value[1]}"
		printf "Remove link %s\n" "${value[1]}"
		;;
	F)
		#file
		rm -f "${value[1]}"
		printf "Remove file %s\n" "${value[1]}"
		;;
	esac
	
}



gpkg_mark_remove()
{
	gpkg_mark_remove_array[$mark_count]="$1"
	mark_count=$(($mark_count+1))
}

gpkg_reverse_remove()
{
	local totle=${#gpkg_mark_remove_array[*]}
	local i

	for ((i=$(($totle-1)); i>=0; i--))
	do
		gpkg_rm_dir_safe "${gpkg_mark_remove_array[$i]}"
	done
}

gpkg_csvop_rm_dir()
{
	case "${value[0]}" in
	D)
		#Directory.
		gpkg_mark_remove "${value[1]}"
		;;
	esac
}

# read from stdin
gpkg_read()
{
	local line
	local count
	local -a value

	while IFS= read -r line
	do
		[ -z "$line" ] && continue

		csv_split "$line"
		case "$XG_CSV_OP" in
		l)
			gpkg_csvop_ls
			;;
		f)
			gpkg_csvop_rm_file
			;;
		d)
			gpkg_csvop_rm_dir
			;;
		*)
			gpkg_csvop_ls
			;;
		esac
	done
}

#read from a file, $1 is file name, $2 is operation
gpkg_readfile()
{
	XG_CSV_OP=$2
	gpkg_read < $1
}

#
# list all installed packages
#

gpkg_list_inst_info()
{
	local files=$(ls $XGPATH/db/$1/$2/*.xgb)
	local file
	local count
	local -a value
	local t1
	local t2
	local tsize

	for file in $files
	do
		file=${file##*/}
		atom_parse $file

		#get date.
		csv_split `cat $XGPATH/db/$1/$2/$N-$V$R.date`
		t1=${value[0]}
		t2=${value[1]}

		#get size, 
		csv_split `tail -n 1 $XGPATH/db/$1/$2/$N-$V$R.file`
		tsize=${value[5]}

		printf "%s %s %6sK %s\n" $t1 $t2 $tsize $N-$V$R
	done
	
}

gpkg_list_installed()
{
	local gpkg_types
	local type
	local gpkg_packs
	local pack
	local count=0

	gpkg_types=`ls $XGPATH/db 2>/dev/null`
	for type in $gpkg_types
	do
		gpkg_packs=`ls $XGPATH/db/$type 2>/dev/null`
		for pack in $gpkg_packs
		do
			gpkg_list_inst_info $type $pack	
		done
	done

}

gpkg_list_showallfile()
{
	local files=$(ls $XGPATH/db/$1/$2/*.xgb)
	local file
	local count
	local -a value
	local t1
	local t2
	local tsize

	for file in $files
	do
		file=${file##*/}
		atom_parse $file

		gpkg_readfile "$XGPATH/db/$1/$2/$N-$V$R.file" "l"
	done

}

gpkg_list_package()
{
	local gpkg_types
	local type
	local gpkg_packs
	local pack
	local findcount=0

	gpkg_types=`ls $XGPATH/db 2>/dev/null`
	for type in $gpkg_types
	do
		gpkg_packs=`ls $XGPATH/db/$type 2>/dev/null`
		for pack in $gpkg_packs
		do
			if [ "$pack" == "$1" ]; then
				#find, List info.
				gpkg_list_showallfile $type $pack
				findcount=$(($findcount+1))
			fi
		done
	done

	[ "$findcount" == "0" ] && echo "package $1 not found"
}

gpkg_do_remove_package()
{
	local files=$(ls $XGPATH/db/$1/$2/*.xgb)
	local file
	local count
	local -a value
	local t1
	local t2
	local tsize
	local infofile

	for file in $files
	do
		file=${file##*/}
		atom_parse $file
		T=$1
		XGPATH_SCRIPT=$XGPATH/db/$1/$2

		infofile=$XGPATH_SCRIPT/$N-$V$R.file

		#remove all files
		gpkg_readfile $infofile "f"

		#reset directory list
		unset gpkg_mark_remove_array
		mark_count=0

		#record all directorys
		gpkg_readfile $infofile "d"

		#remove all dirs
		gpkg_reverse_remove

		#remove infos.
		gpkg_rm_packgeinfo

	done


}

gpkg_remove_package()
{
	local gpkg_types
	local type
	local gpkg_packs
	local pack
	local findcount=0

	gpkg_types=`ls $XGPATH/db 2>/dev/null`
	for type in $gpkg_types
	do
		gpkg_packs=`ls $XGPATH/db/$type 2>/dev/null`
		for pack in $gpkg_packs
		do
			if [ "$pack" == "$1" ]; then
				#find, remove
				gpkg_do_remove_package $type $pack
				findcount=$(($findcount+1))
			fi
		done
	done

	[ "$findcount" == "0" ] && echo "package $1 not found"
}
#
# parse parameters
#
case "${1}" in
-v)
	#show version.
	echo $gpkg_version
	;;

-s)
	#search package.
	gpkg_search $2
	;;

-d)
	gpkg_download $2
	#download
	;;

-i)
	gpkg_install $2
	;;

-D)
	#remove package
	gpkg_remove_package $2
	;;

-I)
	#list installed packages, sort by installed time
	gpkg_list_installed
	;;

-l)
	#list files in packet.
	gpkg_list_package "$2"
	;;

--sync)
	#sync with git.	
	mkdir -p $XGPATH_LIB
	err_check "[Error] Create dir $XGPATH_LIB failed."

	cd $XGPATH_LIB
	err_check "[Error] enter dir $XGPATH_LIB failed."

	if [ -d .git ]; then
		#alread exist.
		git pull
	else
		cd ..
		git clone git://github.com/swordhui/xglibs.git
	fi
	;;

*)
	#show usage 
	gpkg_show_usage
	exit 0
	;;
esac


